// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: nfsfuse.proto
#ifndef GRPC_nfsfuse_2eproto__INCLUDED
#define GRPC_nfsfuse_2eproto__INCLUDED

#include "nfsfuse.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nfsfuse {

class NFS GRPC_FINAL {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status nfsfuse_getattr(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::Stat* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::Stat>> Asyncnfsfuse_getattr(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::Stat>>(Asyncnfsfuse_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::nfsfuse::Dirent>> nfsfuse_readdir(::grpc::ClientContext* context, const ::nfsfuse::String& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::nfsfuse::Dirent>>(nfsfuse_readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsfuse::Dirent>> Asyncnfsfuse_readdir(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::nfsfuse::Dirent>>(Asyncnfsfuse_readdirRaw(context, request, cq, tag));
    }
    virtual ::grpc::Status nfsfuse_open(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::nfsfuse::FuseFileInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::FuseFileInfo>> Asyncnfsfuse_open(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::FuseFileInfo>>(Asyncnfsfuse_openRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_read(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::nfsfuse::ReadResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::ReadResult>> Asyncnfsfuse_read(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::ReadResult>>(Asyncnfsfuse_readRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_write(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::nfsfuse::WriteResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::WriteResult>> Asyncnfsfuse_write(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::WriteResult>>(Asyncnfsfuse_writeRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_create(::grpc::ClientContext* context, const ::nfsfuse::CreateRequest& request, ::nfsfuse::CreateResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::CreateResult>> Asyncnfsfuse_create(::grpc::ClientContext* context, const ::nfsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::CreateResult>>(Asyncnfsfuse_createRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_mkdir(::grpc::ClientContext* context, const ::nfsfuse::MkdirRequest& request, ::nfsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>> Asyncnfsfuse_mkdir(::grpc::ClientContext* context, const ::nfsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_mkdirRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_rmdir(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>> Asyncnfsfuse_rmdir(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_rmdirRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_unlink(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>> Asyncnfsfuse_unlink(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_unlinkRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_rename(::grpc::ClientContext* context, const ::nfsfuse::RenameRequest& request, ::nfsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>> Asyncnfsfuse_rename(::grpc::ClientContext* context, const ::nfsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_renameRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_utimens(::grpc::ClientContext* context, const ::nfsfuse::UtimensRequest& request, ::nfsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>> Asyncnfsfuse_utimens(::grpc::ClientContext* context, const ::nfsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_utimensRaw(context, request, cq));
    }
    virtual ::grpc::Status nfsfuse_mknod(::grpc::ClientContext* context, const ::nfsfuse::MknodRequest& request, ::nfsfuse::OutputInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>> Asyncnfsfuse_mknod(::grpc::ClientContext* context, const ::nfsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_mknodRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::Stat>* Asyncnfsfuse_getattrRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::nfsfuse::Dirent>* nfsfuse_readdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::nfsfuse::Dirent>* Asyncnfsfuse_readdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::FuseFileInfo>* Asyncnfsfuse_openRaw(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::ReadResult>* Asyncnfsfuse_readRaw(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::WriteResult>* Asyncnfsfuse_writeRaw(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::CreateResult>* Asyncnfsfuse_createRaw(::grpc::ClientContext* context, const ::nfsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>* Asyncnfsfuse_mkdirRaw(::grpc::ClientContext* context, const ::nfsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>* Asyncnfsfuse_rmdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>* Asyncnfsfuse_unlinkRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>* Asyncnfsfuse_renameRaw(::grpc::ClientContext* context, const ::nfsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>* Asyncnfsfuse_utimensRaw(::grpc::ClientContext* context, const ::nfsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nfsfuse::OutputInfo>* Asyncnfsfuse_mknodRaw(::grpc::ClientContext* context, const ::nfsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub GRPC_FINAL : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status nfsfuse_getattr(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::Stat* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::Stat>> Asyncnfsfuse_getattr(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::Stat>>(Asyncnfsfuse_getattrRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::nfsfuse::Dirent>> nfsfuse_readdir(::grpc::ClientContext* context, const ::nfsfuse::String& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::nfsfuse::Dirent>>(nfsfuse_readdirRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsfuse::Dirent>> Asyncnfsfuse_readdir(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::nfsfuse::Dirent>>(Asyncnfsfuse_readdirRaw(context, request, cq, tag));
    }
    ::grpc::Status nfsfuse_open(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::nfsfuse::FuseFileInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::FuseFileInfo>> Asyncnfsfuse_open(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::FuseFileInfo>>(Asyncnfsfuse_openRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_read(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::nfsfuse::ReadResult* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::ReadResult>> Asyncnfsfuse_read(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::ReadResult>>(Asyncnfsfuse_readRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_write(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::nfsfuse::WriteResult* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::WriteResult>> Asyncnfsfuse_write(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::WriteResult>>(Asyncnfsfuse_writeRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_create(::grpc::ClientContext* context, const ::nfsfuse::CreateRequest& request, ::nfsfuse::CreateResult* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::CreateResult>> Asyncnfsfuse_create(::grpc::ClientContext* context, const ::nfsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::CreateResult>>(Asyncnfsfuse_createRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_mkdir(::grpc::ClientContext* context, const ::nfsfuse::MkdirRequest& request, ::nfsfuse::OutputInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>> Asyncnfsfuse_mkdir(::grpc::ClientContext* context, const ::nfsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_mkdirRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_rmdir(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::OutputInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>> Asyncnfsfuse_rmdir(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_rmdirRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_unlink(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::OutputInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>> Asyncnfsfuse_unlink(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_unlinkRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_rename(::grpc::ClientContext* context, const ::nfsfuse::RenameRequest& request, ::nfsfuse::OutputInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>> Asyncnfsfuse_rename(::grpc::ClientContext* context, const ::nfsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_renameRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_utimens(::grpc::ClientContext* context, const ::nfsfuse::UtimensRequest& request, ::nfsfuse::OutputInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>> Asyncnfsfuse_utimens(::grpc::ClientContext* context, const ::nfsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_utimensRaw(context, request, cq));
    }
    ::grpc::Status nfsfuse_mknod(::grpc::ClientContext* context, const ::nfsfuse::MknodRequest& request, ::nfsfuse::OutputInfo* response) GRPC_OVERRIDE;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>> Asyncnfsfuse_mknod(::grpc::ClientContext* context, const ::nfsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>>(Asyncnfsfuse_mknodRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::Stat>* Asyncnfsfuse_getattrRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientReader< ::nfsfuse::Dirent>* nfsfuse_readdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request) GRPC_OVERRIDE;
    ::grpc::ClientAsyncReader< ::nfsfuse::Dirent>* Asyncnfsfuse_readdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::FuseFileInfo>* Asyncnfsfuse_openRaw(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::ReadResult>* Asyncnfsfuse_readRaw(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::WriteResult>* Asyncnfsfuse_writeRaw(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::CreateResult>* Asyncnfsfuse_createRaw(::grpc::ClientContext* context, const ::nfsfuse::CreateRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>* Asyncnfsfuse_mkdirRaw(::grpc::ClientContext* context, const ::nfsfuse::MkdirRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>* Asyncnfsfuse_rmdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>* Asyncnfsfuse_unlinkRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>* Asyncnfsfuse_renameRaw(::grpc::ClientContext* context, const ::nfsfuse::RenameRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>* Asyncnfsfuse_utimensRaw(::grpc::ClientContext* context, const ::nfsfuse::UtimensRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    ::grpc::ClientAsyncResponseReader< ::nfsfuse::OutputInfo>* Asyncnfsfuse_mknodRaw(::grpc::ClientContext* context, const ::nfsfuse::MknodRequest& request, ::grpc::CompletionQueue* cq) GRPC_OVERRIDE;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_getattr_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_readdir_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_open_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_read_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_write_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_create_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_mkdir_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_rmdir_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_unlink_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_rename_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_utimens_;
    const ::grpc::RpcMethod rpcmethod_nfsfuse_mknod_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status nfsfuse_getattr(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::Stat* response);
    virtual ::grpc::Status nfsfuse_readdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::grpc::ServerWriter< ::nfsfuse::Dirent>* writer);
    virtual ::grpc::Status nfsfuse_open(::grpc::ServerContext* context, const ::nfsfuse::FuseFileInfo* request, ::nfsfuse::FuseFileInfo* response);
    virtual ::grpc::Status nfsfuse_read(::grpc::ServerContext* context, const ::nfsfuse::ReadRequest* request, ::nfsfuse::ReadResult* response);
    virtual ::grpc::Status nfsfuse_write(::grpc::ServerContext* context, const ::nfsfuse::WriteRequest* request, ::nfsfuse::WriteResult* response);
    virtual ::grpc::Status nfsfuse_create(::grpc::ServerContext* context, const ::nfsfuse::CreateRequest* request, ::nfsfuse::CreateResult* response);
    virtual ::grpc::Status nfsfuse_mkdir(::grpc::ServerContext* context, const ::nfsfuse::MkdirRequest* request, ::nfsfuse::OutputInfo* response);
    virtual ::grpc::Status nfsfuse_rmdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::OutputInfo* response);
    virtual ::grpc::Status nfsfuse_unlink(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::OutputInfo* response);
    virtual ::grpc::Status nfsfuse_rename(::grpc::ServerContext* context, const ::nfsfuse::RenameRequest* request, ::nfsfuse::OutputInfo* response);
    virtual ::grpc::Status nfsfuse_utimens(::grpc::ServerContext* context, const ::nfsfuse::UtimensRequest* request, ::nfsfuse::OutputInfo* response);
    virtual ::grpc::Status nfsfuse_mknod(::grpc::ServerContext* context, const ::nfsfuse::MknodRequest* request, ::nfsfuse::OutputInfo* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_getattr() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_nfsfuse_getattr() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_getattr(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::Stat* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_getattr(::grpc::ServerContext* context, ::nfsfuse::String* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::Stat>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_readdir() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_nfsfuse_readdir() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_readdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::grpc::ServerWriter< ::nfsfuse::Dirent>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_readdir(::grpc::ServerContext* context, ::nfsfuse::String* request, ::grpc::ServerAsyncWriter< ::nfsfuse::Dirent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_open() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_nfsfuse_open() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_open(::grpc::ServerContext* context, const ::nfsfuse::FuseFileInfo* request, ::nfsfuse::FuseFileInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_open(::grpc::ServerContext* context, ::nfsfuse::FuseFileInfo* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::FuseFileInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_read() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_nfsfuse_read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_read(::grpc::ServerContext* context, const ::nfsfuse::ReadRequest* request, ::nfsfuse::ReadResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_read(::grpc::ServerContext* context, ::nfsfuse::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::ReadResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_write() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_nfsfuse_write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_write(::grpc::ServerContext* context, const ::nfsfuse::WriteRequest* request, ::nfsfuse::WriteResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_write(::grpc::ServerContext* context, ::nfsfuse::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::WriteResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_create() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_nfsfuse_create() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_create(::grpc::ServerContext* context, const ::nfsfuse::CreateRequest* request, ::nfsfuse::CreateResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_create(::grpc::ServerContext* context, ::nfsfuse::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::CreateResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_mkdir() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_nfsfuse_mkdir() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_mkdir(::grpc::ServerContext* context, const ::nfsfuse::MkdirRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_mkdir(::grpc::ServerContext* context, ::nfsfuse::MkdirRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_rmdir() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_nfsfuse_rmdir() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_rmdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_rmdir(::grpc::ServerContext* context, ::nfsfuse::String* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_unlink() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_nfsfuse_unlink() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_unlink(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_unlink(::grpc::ServerContext* context, ::nfsfuse::String* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_rename() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_nfsfuse_rename() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_rename(::grpc::ServerContext* context, const ::nfsfuse::RenameRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_rename(::grpc::ServerContext* context, ::nfsfuse::RenameRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_utimens() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_nfsfuse_utimens() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_utimens(::grpc::ServerContext* context, const ::nfsfuse::UtimensRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_utimens(::grpc::ServerContext* context, ::nfsfuse::UtimensRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_nfsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_nfsfuse_mknod() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_nfsfuse_mknod() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_mknod(::grpc::ServerContext* context, const ::nfsfuse::MknodRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestnfsfuse_mknod(::grpc::ServerContext* context, ::nfsfuse::MknodRequest* request, ::grpc::ServerAsyncResponseWriter< ::nfsfuse::OutputInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_nfsfuse_getattr<WithAsyncMethod_nfsfuse_readdir<WithAsyncMethod_nfsfuse_open<WithAsyncMethod_nfsfuse_read<WithAsyncMethod_nfsfuse_write<WithAsyncMethod_nfsfuse_create<WithAsyncMethod_nfsfuse_mkdir<WithAsyncMethod_nfsfuse_rmdir<WithAsyncMethod_nfsfuse_unlink<WithAsyncMethod_nfsfuse_rename<WithAsyncMethod_nfsfuse_utimens<WithAsyncMethod_nfsfuse_mknod<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_getattr : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_getattr() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_nfsfuse_getattr() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_getattr(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::Stat* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_readdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_readdir() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_nfsfuse_readdir() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_readdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::grpc::ServerWriter< ::nfsfuse::Dirent>* writer) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_open : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_open() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_nfsfuse_open() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_open(::grpc::ServerContext* context, const ::nfsfuse::FuseFileInfo* request, ::nfsfuse::FuseFileInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_read() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_nfsfuse_read() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_read(::grpc::ServerContext* context, const ::nfsfuse::ReadRequest* request, ::nfsfuse::ReadResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_write() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_nfsfuse_write() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_write(::grpc::ServerContext* context, const ::nfsfuse::WriteRequest* request, ::nfsfuse::WriteResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_create() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_nfsfuse_create() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_create(::grpc::ServerContext* context, const ::nfsfuse::CreateRequest* request, ::nfsfuse::CreateResult* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_mkdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_mkdir() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_nfsfuse_mkdir() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_mkdir(::grpc::ServerContext* context, const ::nfsfuse::MkdirRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_rmdir : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_rmdir() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_nfsfuse_rmdir() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_rmdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_unlink : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_unlink() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_nfsfuse_unlink() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_unlink(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_rename : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_rename() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_nfsfuse_rename() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_rename(::grpc::ServerContext* context, const ::nfsfuse::RenameRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_utimens : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_utimens() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_nfsfuse_utimens() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_utimens(::grpc::ServerContext* context, const ::nfsfuse::UtimensRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_nfsfuse_mknod : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_nfsfuse_mknod() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_nfsfuse_mknod() GRPC_OVERRIDE {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status nfsfuse_mknod(::grpc::ServerContext* context, const ::nfsfuse::MknodRequest* request, ::nfsfuse::OutputInfo* response) GRPC_FINAL GRPC_OVERRIDE {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
};

}  // namespace nfsfuse


#endif  // GRPC_nfsfuse_2eproto__INCLUDED
