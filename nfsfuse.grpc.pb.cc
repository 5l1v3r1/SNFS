// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: nfsfuse.proto

#include "nfsfuse.pb.h"
#include "nfsfuse.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace nfsfuse {

static const char* NFS_method_names[] = {
  "/nfsfuse.NFS/nfsfuse_getattr",
  "/nfsfuse.NFS/nfsfuse_readdir",
  "/nfsfuse.NFS/nfsfuse_open",
  "/nfsfuse.NFS/nfsfuse_read",
  "/nfsfuse.NFS/nfsfuse_write",
  "/nfsfuse.NFS/nfsfuse_mkdir",
};

std::unique_ptr< NFS::Stub> NFS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< NFS::Stub> stub(new NFS::Stub(channel));
  return stub;
}

NFS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_nfsfuse_getattr_(NFS_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfsfuse_readdir_(NFS_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_nfsfuse_open_(NFS_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfsfuse_read_(NFS_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfsfuse_write_(NFS_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_nfsfuse_mkdir_(NFS_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NFS::Stub::nfsfuse_getattr(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::nfsfuse::Stat* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_nfsfuse_getattr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfsfuse::Stat>* NFS::Stub::Asyncnfsfuse_getattrRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfsfuse::Stat>(channel_.get(), cq, rpcmethod_nfsfuse_getattr_, context, request);
}

::grpc::ClientReader< ::nfsfuse::Dirent>* NFS::Stub::nfsfuse_readdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request) {
  return new ::grpc::ClientReader< ::nfsfuse::Dirent>(channel_.get(), rpcmethod_nfsfuse_readdir_, context, request);
}

::grpc::ClientAsyncReader< ::nfsfuse::Dirent>* NFS::Stub::Asyncnfsfuse_readdirRaw(::grpc::ClientContext* context, const ::nfsfuse::String& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::nfsfuse::Dirent>(channel_.get(), cq, rpcmethod_nfsfuse_readdir_, context, request, tag);
}

::grpc::Status NFS::Stub::nfsfuse_open(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::nfsfuse::FuseFileInfo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_nfsfuse_open_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfsfuse::FuseFileInfo>* NFS::Stub::Asyncnfsfuse_openRaw(::grpc::ClientContext* context, const ::nfsfuse::FuseFileInfo& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfsfuse::FuseFileInfo>(channel_.get(), cq, rpcmethod_nfsfuse_open_, context, request);
}

::grpc::Status NFS::Stub::nfsfuse_read(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::nfsfuse::ReadResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_nfsfuse_read_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfsfuse::ReadResult>* NFS::Stub::Asyncnfsfuse_readRaw(::grpc::ClientContext* context, const ::nfsfuse::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfsfuse::ReadResult>(channel_.get(), cq, rpcmethod_nfsfuse_read_, context, request);
}

::grpc::Status NFS::Stub::nfsfuse_write(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::nfsfuse::WriteResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_nfsfuse_write_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfsfuse::WriteResult>* NFS::Stub::Asyncnfsfuse_writeRaw(::grpc::ClientContext* context, const ::nfsfuse::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfsfuse::WriteResult>(channel_.get(), cq, rpcmethod_nfsfuse_write_, context, request);
}

::grpc::Status NFS::Stub::nfsfuse_mkdir(::grpc::ClientContext* context, const ::nfsfuse::Mkdir& request, ::nfsfuse::MkdirOutput* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_nfsfuse_mkdir_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nfsfuse::MkdirOutput>* NFS::Stub::Asyncnfsfuse_mkdirRaw(::grpc::ClientContext* context, const ::nfsfuse::Mkdir& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nfsfuse::MkdirOutput>(channel_.get(), cq, rpcmethod_nfsfuse_mkdir_, context, request);
}

NFS::Service::Service() {
  (void)NFS_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfsfuse::String, ::nfsfuse::Stat>(
          std::mem_fn(&NFS::Service::nfsfuse_getattr), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< NFS::Service, ::nfsfuse::String, ::nfsfuse::Dirent>(
          std::mem_fn(&NFS::Service::nfsfuse_readdir), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfsfuse::FuseFileInfo, ::nfsfuse::FuseFileInfo>(
          std::mem_fn(&NFS::Service::nfsfuse_open), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfsfuse::ReadRequest, ::nfsfuse::ReadResult>(
          std::mem_fn(&NFS::Service::nfsfuse_read), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfsfuse::WriteRequest, ::nfsfuse::WriteResult>(
          std::mem_fn(&NFS::Service::nfsfuse_write), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NFS_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NFS::Service, ::nfsfuse::Mkdir, ::nfsfuse::MkdirOutput>(
          std::mem_fn(&NFS::Service::nfsfuse_mkdir), this)));
}

NFS::Service::~Service() {
}

::grpc::Status NFS::Service::nfsfuse_getattr(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::nfsfuse::Stat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::nfsfuse_readdir(::grpc::ServerContext* context, const ::nfsfuse::String* request, ::grpc::ServerWriter< ::nfsfuse::Dirent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::nfsfuse_open(::grpc::ServerContext* context, const ::nfsfuse::FuseFileInfo* request, ::nfsfuse::FuseFileInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::nfsfuse_read(::grpc::ServerContext* context, const ::nfsfuse::ReadRequest* request, ::nfsfuse::ReadResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::nfsfuse_write(::grpc::ServerContext* context, const ::nfsfuse::WriteRequest* request, ::nfsfuse::WriteResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NFS::Service::nfsfuse_mkdir(::grpc::ServerContext* context, const ::nfsfuse::Mkdir* request, ::nfsfuse::MkdirOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nfsfuse

