syntax = "proto3";

package nfsfuse;

message SerializeByte {
	bytes buffer = 1;
}

message String {
	string str = 1;
}

message Dirent {
	uint32 dino  =1; 
	string dname = 2;
	uint32 dtype = 3;
	uint32 err = 4;
}


message Stat {
	uint32   dev = 1;    // ID of device containing file 
    uint32   ino = 2;     // inode number 
    uint32   mode = 3;   // protection 
    uint32   nlink = 4;    // number of hard links 
    uint32     uid = 5;     // user ID of owner 
    uint32     gid = 6;     // group ID of owner 
//    uint32     st_rdev=13;    // device ID (if special file) 
    sint64     size = 7;    // total size, in bytes 
    sint64 blksize = 8; // blocksize for file system I/O 
    sint64  blocks = 9;  // number of 512B blocks allocated 
    uint32    atime = 10;   // time of last access 
    uint32    mtime = 11;   // time of last modification
    uint32    ctime = 12;   // time of last status change
    
    uint32    err = 14; 
}

message FuseFileInfo{
    int32 flags = 1;
    int32 fh = 2;
    uint32 oldfh = 3;
    uint64 lockowner = 5;
    uint32 pollevent = 6;

    uint32 err = 4;
    string path = 7;
}

message ReadResult{
    int32 bytesread = 1;
    bytes buffer = 2;
}

message ReadRequest{
    string path =1;
    uint32 size =2;
    int64 offset =3;
}

message WriteRequest{
    string path = 1;
    uint32 size = 2;
    int32 offset = 3; 
    bytes buffer = 4;
}

message WriteResult{
    int32 nbytes = 1;

    int32 err =2;
}

message Mkdir {
    string s = 1;
    uint32 mode = 2;
}

message MkdirOutput {
    string str = 1;
    uint32 err = 2;
}


service NFS {
    rpc nfsfuse_getattr(String) returns (Stat) {}
    rpc nfsfuse_readdir(String) returns (stream Dirent){}
    rpc nfsfuse_open(FuseFileInfo) returns (FuseFileInfo) {}
    rpc nfsfuse_read(ReadRequest) returns (ReadResult) {}
    rpc nfsfuse_write(WriteRequest) returns (WriteResult){}
    rpc nfsfuse_mkdir(Mkdir) returns (MkdirOutput){}
    rpc nfsfuse_rmdir(String) returns (MkdirOutput){}
    rpc nfsfuse_unlink(String) returns (MkdirOutput){}
}



